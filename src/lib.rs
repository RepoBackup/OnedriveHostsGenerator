mod utils;

use chrono::{Local, Utc};
use chrono_tz::Asia::Shanghai;
use hickory_resolver::config::*;
use hickory_resolver::{AsyncResolver, TokioAsyncResolver};
use once_cell::sync::Lazy;
use std::collections::HashMap;
use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};
use std::time::Instant;
use tokio::task::JoinSet;

use crate::utils::{print_ips, StringLine};

include!(concat!(env!("OUT_DIR"), "/domains.rs"));

static RESOLVER: Lazy<TokioAsyncResolver> = Lazy::new(|| {
    let mut options = ResolverOpts::default();
    options.ip_strategy = LookupIpStrategy::Ipv4AndIpv6;
    options.num_concurrent_reqs = 2;
    let mut config = NameServerConfigGroup::quad9_https();
    config.merge(NameServerConfigGroup::cloudflare_https());

    AsyncResolver::tokio(ResolverConfig::from_parts(None, vec![], config), options)
});

pub async fn render(ipv4: bool, ipv6: bool, single: bool) -> (String, u64) {
    let mut header = String::new();
    header.push_str_line("####### Onenote Hosts Start #######");
    header.push_str_line(
        "# This file is generated by https://github.com/Zxilly/OnedriveHostsGenerator",
    );

    let now = Utc::now().with_timezone(&Shanghai);

    header.push_str_line(&format!(
        "# Generate time: {}",
        now.format("%Y-%m-%d %H:%M:%S")
    ));

    let mut content = String::new();

    let mut v4_ips: HashMap<&str, Vec<Ipv4Addr>> = HashMap::new();
    let mut v6_ips: HashMap<&str, Vec<Ipv6Addr>> = HashMap::new();

    let mut max_v4_domain_len = 0;
    let mut max_v6_domain_len = 0;
    let mut max_v4_ip_len = 0;
    let mut max_v6_ip_len = 0;

    let mut tasks = JoinSet::new();

    for domain in DOMAIN_LIST {
        tasks.spawn(async move {
            let ret = RESOLVER.lookup_ip(domain).await;
            (
                domain,
                match ret {
                    Ok(ips) => Ok(ips),
                    Err(e) => Err(e),
                },
            )
        });
    }
    let mut ttls = vec![];

    while let Some(ret) = tasks.join_next().await {
        if let Ok((domain, ret)) = ret {
            match ret {
                Ok(ips) => {
                    let expire_time = ips.valid_until();
                    let ttl = expire_time
                        .saturating_duration_since(Instant::now())
                        .as_secs();
                    ttls.push(ttl);

                    for ip in ips.iter() {
                        match ip {
                            IpAddr::V4(ip) => {
                                v4_ips.entry(domain).or_default().push(ip);
                                max_v4_domain_len = max_v4_domain_len.max(domain.len());
                                max_v4_ip_len = max_v4_ip_len.max(ip.to_string().len());
                            }
                            IpAddr::V6(ip) => {
                                v6_ips.entry(domain).or_default().push(ip);
                                max_v6_domain_len = max_v6_domain_len.max(domain.len());
                                max_v6_ip_len = max_v6_ip_len.max(ip.to_string().len());
                            }
                        }
                    }
                }
                Err(e) => {
                    eprintln!("Resolve {} failed: {}", domain, e);
                }
            }
        } else {
            eprintln!("JoinError: {:?}", ret.unwrap_err());
        }
    }

    if ipv4 {
        content.push_str("\n# IPv4 addresses:\n");

        print_ips(
            &v4_ips,
            &mut content,
            max_v4_domain_len,
            max_v4_ip_len,
            single,
        );
    }

    if ipv6 {
        content.push_str_line("");
        if !v6_ips.is_empty() {
            content.push_str_line("# IPv6 addresses:");
        } else {
            content.push_str_line("# No IPv6 addresses resolved");
        }

        print_ips(
            &v6_ips,
            &mut content,
            max_v6_domain_len,
            max_v6_ip_len,
            single,
        );
    }

    content.push_str_line("####### Onenote Hosts End #######");

    let cost_time = Local::now().signed_duration_since(now).num_milliseconds();

    header.push_str_line(&format!("# Generate in: {} ms", cost_time));

    header.push_str_line(&content);

    (header, utils::trim_mean(&mut ttls, 20.0))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_render_ipv4() {
        let (result, _) = render(true, false, true).await;
        // Assert on the expected result or certain properties of it
        assert!(result.contains("####### Onenote Hosts Start #######"));
        assert!(result.contains("# IPv4 addresses:"));
        assert!(result.contains("####### Onenote Hosts End #######"));
    }

    #[tokio::test]
    async fn test_render_ipv6() {
        let (result, _) = render(false, true, true).await;
        // Assert on the expected result or certain properties of it
        assert!(result.contains("####### Onenote Hosts Start #######"));
        assert!(result.contains("# IPv6 addresses:"));
        assert!(result.contains("####### Onenote Hosts End #######"));
    }

    #[tokio::test]
    async fn test_render_both_ipv4_and_ipv6() {
        let (result, _) = render(true, true, true).await;
        // Assert on the expected result or certain properties of it
        assert!(result.contains("####### Onenote Hosts Start #######"));
        assert!(result.contains("# IPv4 addresses:"));
        assert!(result.contains("# IPv6 addresses:"));
        assert!(result.contains("####### Onenote Hosts End #######"));
    }
}
