mod utils;

use chrono::Local;
use once_cell::sync::Lazy;
use std::collections::HashSet;
use std::net::{Ipv4Addr, Ipv6Addr};
use trust_dns_resolver::config::*;
use trust_dns_resolver::Resolver;

static RESOLVER: Lazy<Resolver> = Lazy::new(|| {
    let r = Resolver::new(ResolverConfig::cloudflare_tls(), ResolverOpts::default()).unwrap();
    r
});

use crate::utils::StringLine;

fn sort_domain(domain_list: Vec<&str>) -> Vec<String> {
    // Sort domain list by domain root name, then by domain name
    let domain_list: HashSet<&str> = domain_list.into_iter().collect();
    let mut domain_list: Vec<String> = domain_list.into_iter().map(String::from).collect();

    domain_list.sort_by(|a, b| {
        let a_parts: Vec<&str> = a.split('.').rev().collect();
        let a = a_parts.join(".");

        let b_parts: Vec<&str> = b.split('.').rev().collect();
        let b = b_parts.join(".");

        a.cmp(&b)
    });

    domain_list
}

static DOMAIN_LIST: Lazy<Vec<String>> = Lazy::new(|| {
    let domain_list = include_str!("../domains.txt");
    let domain_list: Vec<&str> = domain_list
        .split('\n')
        .map(|s| s.trim())
        .filter(|s| !s.is_empty())
        .collect();
    sort_domain(domain_list)
});

pub fn render(ipv4: bool, ipv6: bool) -> String {
    let mut ret = String::new();
    ret.push_str_line("####### Onenote Hosts Start #######");
    ret.push_str_line(
        "# This file is generated by https://github.com/Zxilly/OnedriveHostsGenerator",
    );

    let now = Local::now();

    ret.push_str_line(&format!(
        "# Generate time: {}",
        now.format("%Y-%m-%d %H:%M:%S")
    ));

    let mut v4_ips: Vec<(String, Ipv4Addr)> = vec![];
    let mut v6_ips: Vec<(String, Ipv6Addr)> = vec![];
    let mut unresolved_domains: Vec<String> = vec![];

    for domain in DOMAIN_LIST.clone().into_iter() {
        let addrs = RESOLVER.lookup_ip(domain.clone());
        if addrs.is_err() {
            eprintln!("resolve domain err: {:?}", addrs.err());
            unresolved_domains.push(domain);
            continue;
        }
        let addrs = addrs.unwrap();

        for addr in addrs.iter() {
            match addr {
                std::net::IpAddr::V4(v4_addr) => {
                    v4_ips.push((domain.clone(), v4_addr));
                }
                std::net::IpAddr::V6(v6_addr) => {
                    v6_ips.push((domain.clone(), v6_addr));
                }
            }
        }
    }

    if !unresolved_domains.is_empty() {
        ret.push_str_line("\n# Unresolved domains");
        for domain in unresolved_domains.into_iter() {
            ret.push_str_line(&format!("# {} not resolved", domain));
        }
    }

    fn find_max_length<T: std::fmt::Display>(ips: &[(String, T)]) -> (usize, usize) {
        let mut max_ip_len = 0;
        let mut max_domain_len = 0;
        ips.iter().for_each(|(domain, ip)| {
            let len = ip.to_string().len();
            if len > max_ip_len {
                max_ip_len = len;
            }
            let len = domain.len();
            if len > max_domain_len {
                max_domain_len = len;
            }
        });
        (max_ip_len, max_domain_len)
    }

    if ipv4 {
        ret.push_str("\n# IPv4 addresses:\n");

        // find max length of v4 ip
        let (max_v4_ip_len, max_v4_domain_len) = find_max_length(&v4_ips);

        for (domain, ip) in v4_ips.into_iter() {
            ret.push_str_line(&format!(
                "{:w1$} {:>w2$}",
                ip,
                domain,
                w1 = max_v4_ip_len,
                w2 = max_v4_domain_len
            ));
        }
    }

    if ipv6 {
        ret.push_str_line("");
        if !v6_ips.is_empty() {
            ret.push_str_line("# IPv6 addresses:");
        } else {
            ret.push_str_line("# No IPv6 addresses resolved");
        }

        // find max length of v6 ip
        let (max_v6_ip_len, max_v6_domain_len) = find_max_length(&v6_ips);

        for (domain, ip) in v6_ips.into_iter() {
            ret.push_str_line(&format!(
                "{:w1$} {:>w2$}",
                ip,
                domain,
                w1 = max_v6_ip_len,
                w2 = max_v6_domain_len
            ));
        }
    }

    ret.push_str_line("####### Onenote Hosts End #######");

    ret
}
